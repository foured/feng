ЗАПЕКАНИЕ ТЕНЕЙ
	+ трансформировать каждый треугольник в простарнство текстуры
	+ текстурные координаты в .vs надо перевести из [0, 1] -> [-1, 1]

БЛЮР
	- уничтожение буферов
	- поддержка разных форматов текстур

СОХРАНЕНИЯ
	- сохранять текстуры в png, а не просто пиксели: слишком много места

IMPLEMENT_WORK_IN_PROGRESS_CODE
	- UBOs
	- gaussian blur
	- light baking

OCTREE
	- если объект покинул переделы octree, он никогда туда сам не попадет
	- сделать так, что если объект меньше ячейки, то при возможности он умещается в несколько ячеек поменьше, а не в родительскую
		* пока только для статических объектов (при первичном добавлении статические объекты "запекаются" в ноды и не могут их больше менять)
			* пока не понял, что делать с повторением коллизии между не статическим объектом и частями статического, убрал фичу
	+ добавить проверку коллизии с объектами дочерних ячеек
	- добавить обработку только ближайших ячеек к камере
	- добавить node pool
	+ при обновлении нод, объект может перемещаться в другие ноды (если он двигался), но в тоже время он будет числиться в изначальной
	- оптимизировать коллизии (один объект может проверяться с другим несколько раз, так как статические разбиваются на ячейки)
	+ если объект покидает octree, его object_type остается живым
	- когда объект перемещается внутри ноды и выходит из состава его октанта, он ищет себе ноду такого же размера, но не возрождает мертвых

COLLISION
	* SAT
	
	+ коллайдер может быть больше, чем simple_collider::bounds надо каждый коллайдер сделать bounds_updater
	- возможно будут баги из за того, что вычисление коллизии и смещение объектов происходит вместе с первой фазой 
		определения коллизии (octree)
	- в polygon::cyrus_beck_clip вершины должны располагаться по или против часовой стрелки (не произвольно)
	? я рассчитываю collision_contact который будет после сдвига объекта (возможно недопонимение в некоторых моментах)
	- добавить оптимизации на рассчет точек коллизии (может не всегда быть нужным)
	- иногда (например когда объект падает ребвом на параллельное ребро другого объекта) полигоны контакта коллизии становятся очень
		маленькими. может стоит переделывать их в ребра (edge)
		
ОСВЕЩЕНИЕ
	- добавить поворот объектов для point light 
	- проветь нормали на повернутых объектах

КЛАССЫ
	* INSTANCE
		- переделать state через bitset
		-+ сделать так, чтобы статические объекты не могли двигаться
			* добавлен лог варнинг при перемещении
	
	* COMPONENT-s
		- сделать напоминалку, что они могут хранить только std::weak_ptr в себе
		- добавить всем сохранения и копирования
		
	* BOX_RENDERER-s
		+ некоторые матрицы уже умножены на модел матрицу, надо справлять
		- когда model view proj матрицы будут вынесены в UBO, использовать его
		
	* MODEL
		- сделать проверку, что количество инстансев меньше максимального



МЫСЛИ:

Загрузки:
	В некий game manager передается начатьлая сцена: наследник от scene. Она инстанциируется и запускается.
	Данные между сценами передаются через std::any